//***************************************************
//Patch the user's ids files as necessary
//***************************************************
APPEND ~STATE.IDS~ ~0x80101FEF CD_STATE_NOTVALID~
	UNLESS ~CD_STATE_NOTVALID~ // already in EE
APPEND ~state.ids~ ~0x00102029 STATE_HARMLESS~
	UNLESS ~0x00102029 STATE_HARMLESS~ // already in EE
APPEND ~state.ids~ ~0x00400010 STATE_NOT_VISIBLE~
	UNLESS ~0x00400010 STATE_NOT_VISIBLE~ // not in EE, alias of STATE_NOT_TARGETABLE

APPEND ~shoutids.ids~ ~1001 POISONED~
	UNLESS ~1001 POISONED~ // not in EE
APPEND ~shoutids.ids~ ~2024 SEE_ENEMY~
	UNLESS ~2024 SEE_ENEMY~ // not in EE
APPEND ~shoutids.ids~ ~2001 HELP~
	UNLESS ~2001 HELP~ // not in EE

APPEND ~specific.ids~ ~202 HAS_SHIELDS~
	UNLESS ~202 HAS_SHIELDS~ // not in EE
APPEND ~specific.ids~ ~202 HAS_SHIELD~
	UNLESS ~202 HAS_SHIELD~ // not in EE
APPEND ~specific.ids~ ~201 NEEDS_BREACH~
	UNLESS ~201 NEEDS_BREACH~ // not in EE

ACTION_IF (NOT GAME_IS ~bgee bg2ee eet~) BEGIN // only if not EE
	APPEND ~ACTION.IDS~ ~31 SpellRES(S:RES*,O:Target*)~
		UNLESS ~31 SpellRES(S:RES\*,O:Target\*)~
	APPEND ~ACTION.IDS~ ~95 SpellPointRES(S:RES*,P:Target*)~
		UNLESS ~95 SpellPointRES(S:RES\*,P:Target\*)~
	APPEND ~ACTION.IDS~ ~113 ForceSpellRES(S:RES*,O:Target)~
		UNLESS ~113 ForceSpellRES(S:RES\*,O:Target)~
	APPEND ~ACTION.IDS~ ~114 ForceSpellPointRES(S:RES*,P:Target)~
		UNLESS ~114 ForceSpellPointRES(S:RES\*,P:Target)~
	APPEND ~ACTION.IDS~ ~147 RemoveSpellRES(S:Spell*)~
		UNLESS ~147 RemoveSpellRES(S:Spell\*)~
	APPEND ~ACTION.IDS~ ~160 ApplySpellRES(S:RES*,O:Target)~
		UNLESS ~160 ApplySpellRES(S:RES\*,O:Target)~
	APPEND ~ACTION.IDS~ ~181 ReallyForceSpellRES(S:RES*,O:Target)~
		UNLESS ~181 ReallyForceSpellRES(S:RES\*,O:Target)~
	APPEND ~ACTION.IDS~ ~191 SpellNoDecRES(S:RES*,O:Target*)~
		UNLESS ~191 SpellNoDecRES(S:RES\*,O:Target\*)~
	APPEND ~ACTION.IDS~ ~192 SpellPointNoDecRES(S:RES*,P:Target*)~
		UNLESS ~192 SpellPointNoDecRES(S:RES\*,P:Target\*)~
	APPEND ~ACTION.IDS~ ~240 ReallyForceSpellDeadRES(S:RES*,O:Target)~
		UNLESS ~240 ReallyForceSpellDeadRES(S:RES\*,O:Target)~
	APPEND ~ACTION.IDS~ ~318 ForceSpellRangeRES(S:RES*,O:Target)~
		UNLESS ~318 ForceSpellRangeRES(S:RES\*,O:Target)~
	APPEND ~ACTION.IDS~ ~319 ForceSpellPointRangeRES(S:RES*,P:Target)~
		UNLESS ~319 ForceSpellPointRangeRES(S:RES\*,P:Target)~
	APPEND ~ACTION.IDS~ ~336 MakeGlobal()~
		UNLESS ~336 MakeGlobal()~
	APPEND ~ACTION.IDS~ ~337 ReallyForceSpellPointRES(S:RES*,P:Target*)~
		UNLESS ~337 ReallyForceSpellPointRES(S:RES\*,P:Target\*)~
	APPEND ~ACTION.IDS~ ~7 CreateCreature(S:NewObject*,P:Location*,I:Dir*)~
		UNLESS ~7 CreateCreature(S:NewObject\*,P:Location\*,I:Dir\*.*)~

	APPEND ~TRIGGER.IDS~ ~0x00A1 SpellCastOnMeRES(S:Spell*,O:Caster*)~
		UNLESS ~0x00A1 SpellCastOnMeRES(S:Spell\*,O:Caster\*)~
	APPEND ~TRIGGER.IDS~ ~0x0091 SpellCastRES(S:Spell*,O:Object*)~
		UNLESS ~0x0091 SpellCastRES(S:Spell\*,O:Object\*)~
	APPEND ~TRIGGER.IDS~ ~0x00A6 SpellCastPriestRES(S:Spell*,O:Object*)~
		UNLESS ~0x00A6 SpellCastPriestRES(S:Spell\*,O:Object\*)~
	APPEND ~TRIGGER.IDS~ ~0x00A7 SpellCastInnateRES(S:Spell*,O:Object*)~
		UNLESS ~0x00A7 SpellCastInnateRES(S:Spell\*,O:Object\*)~
	APPEND ~TRIGGER.IDS~ ~0x4031 HaveSpellRES(S:Spell*)~
		UNLESS ~0x4031 HaveSpellRES(S:Spell\*)~
	APPEND ~TRIGGER.IDS~ ~0x40D5 ActuallyInCombat()~
		UNLESS ~0x40D5 ActuallyInCombat()~
END

// I can do this because they are my ids files
COPY ~fishingfortrouble/ids/Dir.ids~ ~override/Dir.ids~
COPY ~fishingfortrouble/ids/formatio.ids~ ~override/formatio.ids~

//**********************************************************
//EXE patches to enable race strrefs and paperdolls are from Taimon and Erephine, respectively
OUTER_SET tbex = 0 //Assume no TobEx unless detected
ACTION_IF (~%WEIDU_OS%~ STRING_EQUAL_CASE ~win32~ != 0) AND (NOT GAME_IS ~bgee bg2ee eet~) BEGIN // only if Windows and not EE
	ACTION_IF ((FILE_EXISTS ~TobEx_ini/TobExCore.ini~) AND (FILE_CONTAINS ~TobEx_ini/TobExCore.ini~ ~Externalise Race Selection StrRef=1~)) BEGIN
		OUTER_SET tbex = 1
	END ELSE ACTION_IF (FILE_EXISTS ~TobEx_ini/TobExVer.txt~) BEGIN
		OUTER_SET tbex = 2
	END ELSE BEGIN
		OUTER_PATCH_SAVE orig_bytes_1 ~~ BEGIN
			INSERT_BYTES 0x000 0xc
			WRITE_LONG 0x000 0xfe38bd81
			WRITE_LONG 0x004 0x0098ffff
			WRITE_LONG 0x008 0x5d770000
		END

		OUTER_PATCH_SAVE patch_bytes_1 ~~ BEGIN
			INSERT_BYTES 0x000 0xc
			WRITE_LONG 0x000 0x68cee850
			WRITE_LONG 0x004 0x45890022
			WRITE_LONG 0x008 0x9065eb80
		END

		OUTER_PATCH_SAVE orig_bytes_2 ~~ BEGIN
			INSERT_BYTES 0x000 0x12
			WRITE_LONG 0x000 0xfe4cbd81
			WRITE_LONG 0x004 0x0098ffff
			WRITE_LONG 0x008 0x75770000
			WRITE_LONG 0x00c 0xfe4c958b
			WRITE_SHORT 0x010 0xffff
		END

		OUTER_PATCH_SAVE patch_bytes_2 ~~ BEGIN
			INSERT_BYTES 0x000 0x12
			WRITE_LONG 0x000 0x14a6e852
			WRITE_LONG 0x004 0x85890003
			WRITE_LONG 0x008 0xffffff78
			WRITE_LONG 0x00c 0x90907deb
			WRITE_SHORT 0x010 0x9090
		END

		OUTER_PATCH_SAVE orig_bytes_3 ~~ BEGIN
			INSERT_BYTES 0x000 0xe
			WRITE_LONG 0x000 0x99e47d81
			WRITE_LONG 0x004 0x77000000
			WRITE_LONG 0x008 0xe4558b63
			WRITE_SHORT 0x00c 0xc933
		END

		OUTER_PATCH_SAVE patch_bytes_3 ~~ BEGIN
			INSERT_BYTES 0x000 0xe
			WRITE_LONG 0x000 0x00f1e850
			WRITE_LONG 0x004 0x45890000
			WRITE_LONG 0x008 0x008ae9f0
			WRITE_SHORT 0x00c 0x0000
		END

		OUTER_PATCH_SAVE orig_bytes_4 ~~ BEGIN
			INSERT_BYTES 0x000 0xc2
			WRITE_LONG 0x000 0x006d9000
			WRITE_LONG 0x004 0x006d8fc1
			WRITE_LONG 0x008 0x006d8fca
			WRITE_LONG 0x00c 0x006d8fd3
			WRITE_LONG 0x010 0x006d8fdc
			WRITE_LONG 0x014 0x006d8fee
			WRITE_LONG 0x018 0x006d8fe5
			WRITE_LONG 0x01c 0x006d8ff7
			WRITE_LONG 0x020 0x006d9009
			WRITE_LONG 0x024 0x006d9012
			WRITE_LONG 0x028 0x03020100
			WRITE_LONG 0x02c 0x07060504
			WRITE_LONG 0x030 0x09090909
			WRITE_LONG 0x034 0x09090909
			WRITE_LONG 0x038 0x09090909
			WRITE_LONG 0x03c 0x09090909
			WRITE_LONG 0x040 0x09090909
			WRITE_LONG 0x044 0x09090909
			WRITE_LONG 0x048 0x09090909
			WRITE_LONG 0x04c 0x09090909
			WRITE_LONG 0x050 0x09090909
			WRITE_LONG 0x054 0x09090909
			WRITE_LONG 0x058 0x09090909
			WRITE_LONG 0x05c 0x09090909
			WRITE_LONG 0x060 0x09090909
			WRITE_LONG 0x064 0x09090909
			WRITE_LONG 0x068 0x09090909
			WRITE_LONG 0x06c 0x09090909
			WRITE_LONG 0x070 0x09090909
			WRITE_LONG 0x074 0x09090909
			WRITE_LONG 0x078 0x09090909
			WRITE_LONG 0x07c 0x09090909
			WRITE_LONG 0x080 0x09090909
			WRITE_LONG 0x084 0x09090909
			WRITE_LONG 0x088 0x09090909
			WRITE_LONG 0x08c 0x09090909
			WRITE_LONG 0x090 0x09090909
			WRITE_LONG 0x094 0x09090909
			WRITE_LONG 0x098 0x09090909
			WRITE_LONG 0x09c 0x09090909
			WRITE_LONG 0x0a0 0x09090909
			WRITE_LONG 0x0a4 0x09090909
			WRITE_LONG 0x0a8 0x09090909
			WRITE_LONG 0x0ac 0x09090909
			WRITE_LONG 0x0b0 0x09090909
			WRITE_LONG 0x0b4 0x09090909
			WRITE_LONG 0x0b8 0x09090909
			WRITE_LONG 0x0bc 0x09090909
			WRITE_SHORT 0x0c0 0x0809
		END

		OUTER_PATCH_SAVE patch_bytes_4 ~~ BEGIN
			INSERT_BYTES 0x000 0xc2
			WRITE_LONG 0x000 0x83ec8b55
			WRITE_LONG 0x004 0x4d8d30ec
			WRITE_LONG 0x008 0x5185e8dc
			WRITE_LONG 0x00c 0x4f68fff6
			WRITE_LONG 0x010 0x8d006d91
			WRITE_LONG 0x014 0xcde8dc4d
			WRITE_LONG 0x018 0x8bffd29c
			WRITE_LONG 0x01c 0xc085dc45
			WRITE_LONG 0x020 0x10a16274
			WRITE_LONG 0x024 0x8900b720
			WRITE_LONG 0x028 0x75ffd845
			WRITE_LONG 0x02c 0x1cb86808
			WRITE_LONG 0x030 0x558d00b1
			WRITE_LONG 0x034 0x0de852d8
			WRITE_LONG 0x038 0x8300374a
			WRITE_LONG 0x03c 0x58680cc4
			WRITE_LONG 0x040 0x8d006d91
			WRITE_LONG 0x044 0x53e8d44d
			WRITE_LONG 0x048 0x8d003778
			WRITE_LONG 0x04c 0x8d52d855
			WRITE_LONG 0x050 0x8d50d445
			WRITE_LONG 0x054 0xf7e8dc4d
			WRITE_LONG 0x058 0x8bffd2b6
			WRITE_LONG 0x05c 0xd0558d00
			WRITE_LONG 0x060 0x1cb86852
			WRITE_LONG 0x064 0xe85000b1
			WRITE_LONG 0x068 0x0035fa03
			WRITE_LONG 0x06c 0x8d0cc483
			WRITE_LONG 0x070 0xb9e8d84d
			WRITE_LONG 0x074 0x8d003777
			WRITE_LONG 0x078 0xb1e8d44d
			WRITE_LONG 0x07c 0x8b003777
			WRITE_LONG 0x080 0x05ebd045
			WRITE_LONG 0x084 0xffffffb8
			WRITE_LONG 0x088 0x5de58bff
			WRITE_LONG 0x08c 0x000004c2
			WRITE_LONG 0x090 0x00000000
			WRITE_LONG 0x094 0x00000000
			WRITE_LONG 0x098 0x00000000
			WRITE_LONG 0x09c 0x00000000
			WRITE_LONG 0x0a0 0x00000000
			WRITE_LONG 0x0a4 0x00000000
			WRITE_LONG 0x0a8 0x00000000
			WRITE_LONG 0x0ac 0x00000000
			WRITE_LONG 0x0b0 0x41520000
			WRITE_LONG 0x0b4 0x45544543
			WRITE_LONG 0x0b8 0x53005458
			WRITE_LONG 0x0bc 0x45525254
			WRITE_SHORT 0x0c0 0x0046
		END

		OUTER_PATCH_SAVE orig_bytes_5 ~~ BEGIN
			INSERT_BYTES 0x000 0x1f
			WRITE_LONG 0x000 0xff78bd83
			WRITE_LONG 0x004 0x7706ffff
			WRITE_LONG 0x008 0x78958b4c
			WRITE_LONG 0x00c 0xffffffff
			WRITE_LONG 0x010 0x44589524
			WRITE_LONG 0x014 0x45c70073
			WRITE_LONG 0x018 0x001c1980
			WRITE_SHORT 0x01c 0xeb00
			WRITE_BYTE 0x01e 0x5f
		END

		OUTER_PATCH_SAVE patch_bytes_5 ~~ BEGIN
			INSERT_BYTES 0x000 0x1f
			WRITE_LONG 0x000 0x04f98341
			WRITE_LONG 0x004 0xc1830575
			WRITE_LONG 0x008 0x8308eb02
			WRITE_LONG 0x00c 0x037506f9
			WRITE_LONG 0x010 0x5102e983
			WRITE_LONG 0x014 0xfa4d07e8
			WRITE_LONG 0x018 0x804589ff
			WRITE_SHORT 0x01c 0x60eb
			WRITE_BYTE 0x01e 0x90
		END

		OUTER_PATCH_SAVE orig_bytes_6 ~~ BEGIN
			INSERT_BYTES 0x000 0x12
			WRITE_LONG 0x000 0xfcd8bd81
			WRITE_LONG 0x004 0x0098ffff
			WRITE_LONG 0x008 0x75770000
			WRITE_LONG 0x00c 0xfcd8958b
			WRITE_SHORT 0x010 0xffff
		END

		OUTER_PATCH_SAVE patch_bytes_6 ~~ BEGIN
			INSERT_BYTES 0x000 0x12
			WRITE_LONG 0x000 0x4f02e852
			WRITE_LONG 0x004 0x8589ffef
			WRITE_LONG 0x008 0xffffff78
			WRITE_LONG 0x00c 0x90907deb
			WRITE_SHORT 0x010 0x9090
		END
	END

	ACTION_IF tbex < 2 BEGIN
		COPY ~bgmain.exe~ ~bgmain.exe~
			PATCH_IF tbex = 1 BEGIN
				PATCH_PRINT @40010
			END ELSE BEGIN
				READ_ASCII 0x0b27c9 target_bytes_1 ELSE 0 (0xc)
				READ_ASCII 0x2a7bf1 target_bytes_2 ELSE 0 (0x12)
				READ_ASCII 0x2d8fa6 target_bytes_3 ELSE 0 (0xe)
				READ_ASCII 0x2d909d target_bytes_4 ELSE 0 (0xc2)
				READ_ASCII 0x33437d target_bytes_5 ELSE 0 (0x1f)
				READ_ASCII 0x3e4195 target_bytes_6 ELSE 0 (0x12)
				PATCH_IF (~%target_bytes_1%~ STRING_EQUAL ~%orig_bytes_1%~)
					AND (~%target_bytes_2%~ STRING_EQUAL ~%orig_bytes_2%~)
					AND (~%target_bytes_3%~ STRING_EQUAL ~%orig_bytes_3%~)
					AND (~%target_bytes_4%~ STRING_EQUAL ~%orig_bytes_4%~)
					AND (~%target_bytes_5%~ STRING_EQUAL ~%orig_bytes_5%~)
					AND (~%target_bytes_6%~ STRING_EQUAL ~%orig_bytes_6%~)
				THEN BEGIN
					PATCH_PRINT @40020
					WRITE_ASCIIE 0x000b27c9 ~%patch_bytes_1%~ (0xc)
					WRITE_ASCIIE 0x002a7bf1 ~%patch_bytes_2%~ (0x12)
					WRITE_ASCIIE 0x002d8fa6 ~%patch_bytes_3%~ (0xe)
					WRITE_ASCIIE 0x002d909d ~%patch_bytes_4%~ (0xc2)
					WRITE_ASCIIE 0x0033437d ~%patch_bytes_5%~ (0x1f)
					WRITE_ASCIIE 0x003e4195 ~%patch_bytes_6%~ (0x12)
				END ELSE BEGIN
					PATCH_PRINT @40030
				END
				READ_BYTE 0x41ae67 b1
				READ_LONG 0x41ae68 b2
				READ_BYTE 0x41ae86 b3
				READ_LONG 0x41ae87 b4
				PATCH_IF (b1 = 0xe9) AND (b2 = 0x1ec) AND (b3 = 0xe9) AND (b4 = 0x1cd) BEGIN
					PATCH_PRINT @40040
					WRITE_BYTE 0x41ae67 0xeb
					WRITE_LONG 0x41ae68 0x90909042
					WRITE_BYTE 0x41ae86 0xeb
					WRITE_LONG 0x41ae87 0x90909023
				END ELSE BEGIN
					PATCH_PRINT @40050
				END
			END
		BUT_ONLY
	END
END
